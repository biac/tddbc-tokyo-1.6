■ T16MAIN-1: putでkeyとvalueを追加し、dumpで一覧表示、getでkeyに対応するvalueを取得できる
put で keyとvalueを追加する
 • dumpで登録されている一覧を表示
 • getで指定したkeyのvalueを取得
注1)keyにnullをわたすと例外が発生
注2)valueのnullは許容する

※ keyとvalueの型は? …分からないから、とりあえずstringにしとくか f(^^;


■ T16MAIN-2: deleteで指定のkey-valueを削除
deleteで指定したkeyとvalueを削除する
 • 存在しないkeyが渡されたら何もしない
 • nullを渡すと例外が発生する

■ T16MAIN-3: putの引数に既に存在するkeyが指定された場合、valueのみを更新する
putで既に存在するkeyの場合はvalueを更新する

■ T16MAIN-4: keyとvalueのセットを一度に複数追加できる
複数のkeyとvalueをまとめて追加できるようにする
同じキーが複数ある場合、一番最後に指定されたものが使用される。
既に存在するキーがある場合も、今回指定したものが優先される。
指定した引数の中にnullのキーがある場合、例外を投げ、状態を元に戻す。

// ここまででフェーズ1 終了



13:45 2011/08/03

■ T16MAIN-5: putの引数でkey,value,date(時刻情報)を渡し、dumpを時間順に出力するように仕様変更
putの引数でkey,value,date(時刻情報)を渡せるようにする。
また、dump関数は時刻が新しい方から古い方へ順にkey、valueを出力するように変更する。
引数に複数指定して追加する関数の場合、後ろにあるものほど新しいとみなす。

※ こういうときはTDD三原則から外れて、先に実装のメンバー変数 _dic の型を変えてしまう(複雑になるので、リファクタリングとは呼ばない)。
  オールGREENになるようにしてから、テストケースを増やす。

※ 今までは key, value だけだったから、.NET Framework の KeyValuPair が入れ物に使えた。
  ここからは、key, value, time をセットで保持できる入れ物が必要になる。
  その入れ物として Tupple を使いたい誘惑に駆られるが… Dump() で public に公開する型になるので、Tupple ではマズい。
	※※ Tupple では、KeyValuPair とインターフェースが合わない (Key, Value プロパティが無い)
	※※ Tupple には何が入っているのか、ドキュメントが無いと分からない。private で使う分には便利だが、public にすべきではない。
  → KeyValuPair を拡張したカタチの入れ物 KeyValueTime を、新しく作る。

※ key が同じで date が異なるときは…? わかんね。とりあえず、両方保持するようにしておく。
※ ん? 複数まとめての put では、date(時刻情報)付けないの? > 引数に複数指定して追加する関数の場合、後ろにあるものほど新しいとみなす。

14:58 2011/08/03 - KeyValueTime の実装完了。KeyValueTime を使うように修正完了。それに伴い、テストケースをいくつか追加。

// ここでコミット: TddbcTokyo1.6_CS02a.zip
	Git tree: https://github.com/biac/tddbc-tokyo-1.6/tree/b4838b0f8bfa075a421dc6e23feeb61ae83dfa86
	差分: https://github.com/biac/tddbc-tokyo-1.6/commit/b4838b0f8bfa075a421dc6e23feeb61ae83dfa86
	TddbcTokyo1.6_CS02a.zip


17:05 2011/08/03 - 不要なコメント等をクリーンアップして、コミット
	Git tree: https://github.com/biac/tddbc-tokyo-1.6/tree/5d660e7bc85244db99fcfd2a093b6da69f8317f9

17:38 2011/08/03 - 1) Put() の引数に time を追加
Put2Test01_ひとつ登録_ひとつ取得()
DumpTest02_2つ登録してDump_ただし時刻順で出すのでPut時と順番が変わる() …ありゃ? 挙動不審。KeyValueTime.CompareTo() を間違えてる。
KeyValueTime.CompareTo() のテストケースと実装をやり直し orz
DumpTest02_2つ登録してDump_ただし時刻順で出すのでPut時と順番が変わる() …改めて、実装

※ ん? 複数登録時はtime付けない? 分からないので後回し! > 引数に複数指定して追加する関数の場合、後ろにあるものほど新しいとみなす。

18:15 2011/08/03
	Git tree: https://github.com/biac/tddbc-tokyo-1.6/tree/b0bf6a12cf7bec9425087877c85aed9a881c4cdd


■ T16MAIN-6: dumpの引数に時刻を指定できるようにする。dump関数は時刻が指定された場合、指定時刻以降のデータのみを表示する
dumpの引数に時刻（秒単位）を指定できるようにする。
dump関数は時刻が指定された場合、指定時刻以降のデータのみを表示する

18:28 2011/08/03

■ T16MAIN-7: deleteの引数に分・秒を指定できる。deleteは分を指定された場合、「現在時刻-引数の分・秒」よりも古いデータをすべて削除する
deleteの引数に分・秒を指定できる。deleteは分・秒を指定された場合、データの時刻情報が「現在時刻-引数の分・秒」よりも古いデータをすべて削除する

※ おっと、現在時刻が出てきた。 先に、現在時刻を提供するクラスを用意しないと! → SystemClockTest
18:49 2011/08/03

では、Delete(int passedMinute, int passedSecond) の実装

19:08 2011/08/03 コミット
	Git tree: https://github.com/biac/tddbc-tokyo-1.6/tree/fbd7dda9a4eb3eae53bd6e56bce3053966ac6a22


22:13 2011/08/03

■ T16MAIN-8: T16MAIN-5のAPI変更
putの引数から時刻を取り除き、現在時刻を使用するようにする

※ ゎはは、そーゆーことかい! f(^^;

これまたけっこう手間を喰う仕様変更だ。生存戦略しませうかw


// 1) Put2Test01_ひとつ登録_ひとつ取得
//		変更: 登録時に time を渡さない
//		※KeyValueTime の Time は、Nullable じゃなくても良くなる。変える。
//		※以降、順次、time を引数に取る Put() を使わないように変えていく

KeyValueTime の Time の型を変えると、コンパイルエラーが出るので、順次潰す。


// 2) PutGetTest01_ひとつ登録_ひとつ取得()
//		追加: 登録時の時刻が保持されていること

Assert.That(dic.Dump().First().Time, Is.EqualTo(time)); を追加しても、RED にならないが、そのまま残しておく。


// 3) DumpTest01_2つ登録してDump_ただし2つめのvalueはnull
//		追加: 登録時の時刻が保持されていること

これも、Assert.That(dump[0].Time, Is.EqualTo(time2)); などを追加しても、RED にならないが、そのまま残しておく。


// 4) PutGetTest03_2回登録ただし同じkey
//		追加: Value だけでなく、Time も更新されていること

Assert.That(dic.Dump()[0].Time, Is.EqualTo(time2)); が RED になる。製品コードの Put() を修正。

// 5) MultiPutTest01_複数まとめて追加_重複キーあり_既存キーもあり
//		追加: 登録時の時刻が保持されていること
//		※ 追加仕様「引数に複数指定して追加する関数の場合、後ろにあるものほど新しいとみなす」により、時刻は微妙にズレる。(以前に分からなくて TODO: しておいたもの)

MultiPut() 後の Dump() が、想定した順序にならず RED。
製品コードの MultiPut() を修正。 データ1件ごとに 1mSec ずつズラすようにする。

// 6) Dump02Test01_3つ登録してDump_時刻指定でひとつしか出ない
//		変更: 登録ごとに現在時刻を変える

変更しても RED にならない。

// 7) Delete2Test01_秒を指定
//		変更: 登録ごとに現在時刻を変える

変更しても RED にならない。

// 8) Delete2Test02_分を指定
//		変更: 登録ごとに現在時刻を変える

変更しても RED にならない。

// 9) time を引数に取る Put() を private に

テストケース修正漏れ:
DumpTest02_2つ登録してDump_ただし時刻順で出すのでPut時と順番が変わる()


最後に、リリースビルドをして、#if DEBUG の付け忘れをチェック!

これで要求された仕様は全部満たしたはず。
残った TODO を転記しておく。

TODO: Key, Value がそれぞれ null のときのテストをやっていない	D:\$projects\TDDBC東京1.6\TddbcTokyo1.6課題\TddbcTokyo16Test\KeyValueTimeTest.cs	126
TODO: 次の Put()/MultiPut() の時刻が近いと、これでは前後関係がおかしくなる。	D:\$projects\TDDBC東京1.6\TddbcTokyo1.6課題\TddbcTokyo16\TddbcDictionary.cs	79
TODO: keyとvalueの型は? …分からないから、とりあえずstringにしとくか f(^^;	D:\$projects\TDDBC東京1.6\TddbcTokyo1.6課題\TddbcTokyo16Test\TddbcDictionaryTest.cs	30
TODO: Get(key)で、該当するkeyが無かった時の挙動が不明。Dumpした個数でテストケースを書いておく。	D:\$projects\TDDBC東京1.6\TddbcTokyo1.6課題\TddbcTokyo16Test\TddbcDictionaryTest.cs	137

これでコミット
23:07 2011/08/03
	Git tree: https://github.com/biac/tddbc-tokyo-1.6/tree/a5b64e6e3371bd3ba4c764204bde2a1eb50b1ccc
	TddbcTokyo1.6_CS02b.zip

23:39 2011/08/03
不要なコメント等をクリーンアップしてコミット
製品コードは合計140行くらい。テストケースは24個。



